@page "/RksReaderEnhanced/index.html"
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Xml
@using System.Text
@using yt6983138.github.io.RksReaderEnhanced;

@inject IJSRuntime JS
@inject HttpClient Http

<div id="Title">
	<h1 id="AppTitle">Rks Reader Enhanced</h1>
	<p id="AppDescription">
		A tool let you read Phigros save file with cool settings, <br />
		all csvs are generated by <a href="https://github.com/7aGiven/Phigros_Resource">this</a> github repo, <br />
		and those "Formats" are <a href="https://learn.microsoft.com/en-us/dotnet/api/system.string.format?view=net-8.0">C# formatter</a>, <br />
		also this app uses webassembly so it has terrible load time :sob:
	</p>
</div>
<div id="Misc">
	<div id="DivInputScoreFormat" class="InputBox">
		<input id="InputScoreFormat" type="text" @bind="ScoreStringFormat" />
		<label>Score Format</label>
	</div>
	<div id="DivInputAccFormat" class="InputBox">
		<input id="InputAccFormat" type="text" @bind="AccFormat" />
		<label>Acc Format, add more zeros after 0.00 to get more precision</label>
	</div>
	<div id="DivInputRksFormat" class="InputBox">
		<input id="InputRksFormat" type="text" @bind="RksFormat" />
		<label>Rks Format, add more zeros after 0.00 to get more precision</label>
	</div>
	<div id="DivInputDifficultyFileLocation" class="InputBox">
		<input id="InputDifficultyFileLocation" type="text" @bind="DifficultyFileLocation" />
		<label>Custom diffculty csv (Do not change it if you don't know what you are doing)</label>
	</div>
	<div id="DivInputNamesFileLocation" class="InputBox">
		<input id="InputNamesFileLocation" type="text" @bind="NamesFileLocation" />
		<label>Custom info csv (Do not change it if you don't know what you are doing)</label>
	</div>
	<div id="DivInputUploadSaveFile" class="InputBox" style="margin: 10px 10px 10px -10px !important;">
		<label for="InputUploadSaveFile" id="CustomUpload">Upload</label>
		<InputFile id="InputUploadSaveFile" OnChange="OnLoadSave" />
		<label>Upload save file (playerPrefs.xml)</label>
	</div>
	<!--<button id="Button.Render" @onclick="RenderAll" disabled=@(!Loaded)>Render!</button> -->
	<div class="ButtonBox">
		<button id="ButtonReset" @onclick="Reset" disabled=@(!Loaded)>Reset</button>
		<button id="ButtonOpenExport" @onclick=@(() => {Content = SubWindowContent.Export; SubWindowOpen = true;}) disabled=@(!Loaded)>Export</button>
		<button id="ButtonOpenGraph" @onclick=@(() => {Content = SubWindowContent.Graph; SubWindowOpen = true;}) disabled=@(!Loaded)>Graph</button>
		<button id="ButtonOpenLog" @onclick=@(() => {Content = SubWindowContent.Log; SubWindowOpen = true;})>Show logs</button>
		<button id="ButtonOpenCloudSave" @onclick=@(() => {Content = SubWindowContent.CloudSave; SubWindowOpen = true;})>Cloud save...</button>
		<div id="DivLabelStatus">
			@{
				string tmp = PageLogger.LatestLogMessageUnformatted;
			}
			<label id="LabelStatus">Last log: @((tmp.Length > 32) ? tmp.Substring(0, 29) + "..." : tmp)</label>
		</div>
	</div>
</div>
@if (SubWindowOpen)
{
	<div id="SubWindow" @onclick=CloseSubWindow>
		@switch (Content)
		{
			case SubWindowContent.Log:
				<div id="LogBox" class="Windows" @onclick:stopPropagation=true>
					<img id="ButtonLogBoxClose" class="WindowClose" @onclick="CloseSubWindow" src="/Assets/Generic/Icons/Close.svg"></img>
					<textarea id="LogTextarea" readonly>
						@foreach (string str in PageLogger.AllLogs)
						{
							@str
							// </textarea> below
						} 
																																																																							</textarea>
				</div>
				// ^ lmao auto format being too smart, also its a auto format counter lmao, more ctrl k+d, the more right it gets lmao
				break;
			case SubWindowContent.Export:
				<div id="ExportBox" class="Windows" @onclick:stopPropagation=true>
					<img id="ButtonExportBoxClose" class="WindowClose" @onclick="CloseSubWindow" src="/Assets/Generic/Icons/Close.svg"></img>
					<div id="CountToExportGroup">
						<input type="number" id="InputCountToExport" @bind="CountToExport" />
						<label id="CountToExportLabel">Number of items to export, put 0 to export all</label>
					</div>
					<button class="ExportButtons" id="ExportCsv" @onclick="ExportCSV">Export CSV</button>
					<button class="ExportButtons" id="ExportJson" @onclick="ExportJSON">Export Json</button>
					<button class="ExportButtons" id="ExportEncryptedTable" @onclick="ExportEncryptDataTable">Export encryption table</button>
				</div>
				break;
			case SubWindowContent.Graph:
				<div id="GraphBox" class="Windows" @onclick:stopPropagation=true>
					<div id="Graph"></div>
					<img id="ButtonGraphBoxClose" class="WindowClose" @onclick="CloseSubWindow" src="/Assets/Generic/Icons/Close.svg"></img>
					<img src @onerror=InitChart>
				</div>
				// ^ very tricky way to get function invoked after auto rendering
				// InitChart();
				break;
			case SubWindowContent.CloudSave:
				<div id="CloudSaveBox" class="Windows" @onclick:stopPropagation=true>
					<img id="ButtonCloudSaveBoxClose" class="WindowClose" @onclick="CloseSubWindow" src="/Assets/Generic/Icons/Close.svg"></img>
					<div id="SessionTokenGroup" class="InputBox">
						<input id="SessionTokenInput" type="password" placeholder="Enter token here" @bind="SessionToken" />
						<label>Get save by session token</label>
						<p id="SessionTokenDescription">
							This allows you to get save by your Phigros token.<br />
							Having problem find it? Here's a <a href="https://potent-cartwheel-e81.notion.site/Phigros-Bot-f154a4b0ea6446c28f62149587cd5f31">guide</a>.<br />
							<a href="https://github.com/7aGiven/PhigrosLibrary">Byte reader source</a> (I swear to god I don't wanna touch it again) <br />
							Tips: You don't need to click "Load cloud save" again if you're just changing time
						</p>
					</div>
					<div id="EntriesAndSelectorGroup">
						<div id="SaveSelectorGroup">
							@* <label id="SaveSelectorLabel">Select save time</label> *@
							<select id="SaveSelector" Name="SaveSelector" size="@CloudSaves.Count" @bind=CurrentSelected>
								<option value="0" disabled selected>Select save time</option>
								@{
									int j = 0;
								}
								@foreach (var item in CloudSaves)
								{
									<option value="@j" @onclick="@(()=> Console.WriteLine(CurrentSelected))">@item.Save.ModificationTime.ToString()</option>
									j++;
								}
							</select>
						</div>
						<div id="MaxEntriesSelectorGroup">
							<input type="number" id="InputMaxEntries" @bind="MaxCloudSaveEntries" />
							<label id="MaxEntriesLabel">Number of max saves to get (to prevent slow network), put 0 to get all</label>
						</div>
					</div>
					<label id="LabelStatusInBox">Last log: @((tmp.Length > 32) ? tmp.Substring(0, 29) + "..." : tmp)</label>
					<button id="LoadCloudSave" @onclick=OnGetSaveByToken>Load cloud save</button>
				</div>
				break;
			default:
				SubWindowOpen = false;
				PageLogger.Log(LoggerType.Warning, "Cannot Open SubWindow: Content not set!");
				break;
		}
	</div>
}
<div id="Scores" style="display: @(Loaded ? "unset" : "none")">
	<table id="InfoTable">
		<tr>
			<th class="TableTitleTexts TableFirst">Difficulty/Info</th>
			<th class="TableTitleTexts TableSecond">AP Count</th>
			<th class="TableTitleTexts TableThird">FC Count</th>
			<th class="TableTitleTexts TableForth">V Count</th>
			<th class="TableTitleTexts TableFifth">S Count</th>
			<th class="TableTitleTexts TableSixth">A Count</th>
			<th class="TableTitleTexts TableSeventh">B Count</th>
			<th class="TableTitleTexts TableEighth">C Count</th>
			<th class="TableTitleTexts TableNinth">False Count</th>
			<th class="TableTitleTexts TableTenth">Clear Count</th>
		</tr>
		@foreach (var pair in Infos)
		{
			<tr>
				<td class="TableData TableFirst">@pair.Key</td>
				<td class="TableData TableSecond">@pair.Value.ap</td>
				<td class="TableData TableThird">@pair.Value.fc</td>
				<td class="TableData TableForth">@pair.Value.vu</td>
				<td class="TableData TableFifth">@pair.Value.s</td>
				<td class="TableData TableSixth">@pair.Value.a</td>
				<td class="TableData TableSeventh">@pair.Value.b</td>
				<td class="TableData TableEighth">@pair.Value.c</td>
				<td class="TableData TableNinth">@pair.Value.f</td>
				<td class="TableData TableTenth">@pair.Value.cleared</td>
			</tr>
		}
		@{
			<tr>
				<td colspan="10" class="TableData" id="AverageRks">B19 + 1Phi Average: @string.Format(RksFormat, AverageRks)</td>
			</tr>
		}
	</table>
	<table id="AboutMe">
		<tr id="TableTitle">
			<th class="TableTitleTexts TableFirst">Avatar</th>
			<th class="TableTitleTexts TableSecond">Nickname</th>
			<th class="TableTitleTexts TableThird">Username</th>
			<th class="TableTitleTexts TableForth">Last modify</th>
			<th class="TableTitleTexts TableFifth">Challenge Rank</th>
		</tr>
		<tr>
			<td class="TableData TableFirst" style="padding: 0px 0px 0px 0px;">
				<img src="@($"/Assets/RksReader/Avatars/{(CurrentSummary.Avatar == "" ? "Introduction" : CurrentSummary.Avatar)}.png")" width="96" style="display: flex" />
			</td>
			<td class="TableData TableSecond">@(CurrentUserInfo.NickName)</td>
			<td class="TableData TableThird">@(CurrentUserInfo.UserName)</td>
			<td class="TableData TableForth">@(CurrentUserInfo.ModificationTime.ToString())</td>
			<td class="TableData TableFifth" id="ChallengeCodeTD">
				@{
					string challenge = CurrentSummary.ChallengeCode.ToString();
					string trimmed = challenge[^Math.Min(2, challenge.Length)..].TrimStart('0');
				}
				<div style="width: 100%; height:100%; position:relative">
					<img src="@($"/Assets/RksReader/Challenge/{(challenge.Length > 2 ? challenge[0] : "0")}.png")" id="ChallengeImg" width="128" />
					<span id="ChallengeText">@(trimmed.Length == 0 ? '0' : trimmed)</span>
				</div>
			</td>
		</tr>
	</table>
	<table id="ScoresTable">
		<tr id="TableTitle">
			<th class="TableTitleTexts TableFirst">Number</th>
			<th class="TableTitleTexts TableSecond">Song Name</th>
			<th class="TableTitleTexts TableThird">Chart Constant</th>
			<th class="TableTitleTexts TableForth">Score</th>
			<th class="TableTitleTexts TableFifth">Acc</th>
			<th class="TableTitleTexts TableSixth">Rks Given</th>
			<th class="TableTitleTexts TableSeventh">Stat</th>
		</tr>
		@{
			int index = 0;
		}
		@foreach (var score in AllScores)
		{
			// if (score.Name == null) continue;
			<tr>
				<td class="TableData TableFirst">@("#" + ((index == 0) ? "φ" : index))</td>
				<td class="TableData TableSecond">@(Names.TryGetValue(score.Name, out string? str) ? str : score.Name)</td>
				<td class="TableData TableThird">@string.Format(ChartConstantFormat, @score.DifficultyName, @score.ChartConstant)</td>
				<td class="TableData TableForth">@string.Format(ScoreStringFormat, @score.Score)</td>
				<td class="TableData TableFifth">@string.Format(AccFormat, @score.Acc)</td>
				<td class="TableData TableSixth">@string.Format(RksFormat, @score.GetRksCalculated())</td>
				<td class="TableData TableSeventh"><img src="@IconUrl[score.Status]" width="64" /></td>
			</tr>
			index++;
		}
	</table>
</div>