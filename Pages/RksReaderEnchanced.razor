@page "/RksReaderEnchanced/index.html"
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Xml
@inject IJSRuntime JS
@inject HttpClient Http

@code {
	class Settings
	{
		public string ScoreFormat { get; set; } = "{0}";
		public string AccFormat { get; set; } = "{0:0.00}%";
		public string RksFormat { get; set; } = "{0:0.00}";
		public string ChartConstantFormat { get; set; } = "{0} {1:0.0}";
		public string DiffcultyFileLocation { get; set; } = "/Assets/RksReader/3.4.0/difficulty.csv";
		public string NamesFileLocation { get; set; } = "/Assets/RksReader/3.4.0/info.csv";
	}
	public enum ScoreStatus
	{
		Bugged = -1,
		NotFc = 0,
		Fc = 1,
		Phi = 2,
		Vu = 3,
		S = 4,
		A = 5,
		B = 6,
		C = 7,
		False = 8
	}
	public struct ScoreFormat
	{
		/// <summary>
		/// Score, ex: 996105
		/// </summary>
		public int s;
		/// <summary>
		/// Acc, ex: 99.56718444824219
		/// </summary>
		public double a;
		/// <summary>
		/// Score Status, 0: not fc, 1: fc...
		/// </summary>
		public ScoreStatus c;
		public InternalScoreFormat ToInternalFormat(float chartConstant, string songName, string diffcultyName)
		{
			return new InternalScoreFormat { Score = this.s, Acc = this.a, Status = ParseStatus(this), ChartConstant = chartConstant, Name = songName, DiffcultyName = diffcultyName };
		}
	}
	public struct InternalScoreFormat
	{
		public int Score = 0;
		/// <summary>
		/// note: format: 99.x% = 99.xxxx...
		/// </summary>
		public double Acc = 0;
		public float ChartConstant = 0;
		public string Name = "Unset";
		public string DiffcultyName = "Unset";
		public ScoreStatus Status = ScoreStatus.False;
		public InternalScoreFormat(int score, double acc, float chartConstant, string name, string diffcultyName, ScoreStatus status)
		{
			this.Score = score;
			this.Acc = acc;
			this.ChartConstant = chartConstant;
			this.Name = name;
			this.Status = status;
			this.DiffcultyName = diffcultyName;
		}
		public double GetRksCalculated()
		{
			if (this.Acc < 0.7)
			{
				return 0;
			}
			return Math.Pow((this.Acc - 55) / 45, 2) * this.ChartConstant;
		}
		public override string ToString()
		{
			return $"Score: {this.Score}, Acc: {this.Acc}, Status: {nameof(this.Status)}, cc: {this.ChartConstant}, calcedRks: {GetRksCalculated()}";
		}
	}
	public static ScoreStatus ParseStatus(ScoreFormat record)
	{
		if (record.a == 100)
		{
			if (record.s == 1000000) { return ScoreStatus.Phi; }
			return ScoreStatus.Bugged;
		}
		if (record.c == ScoreStatus.Fc) { return ScoreStatus.Fc; }
		if (record.s >= 960000) { return ScoreStatus.Vu; }
		if (record.s >= 920000) { return ScoreStatus.S; }
		if (record.s >= 880000) { return ScoreStatus.A; }
		if (record.s >= 820000) { return ScoreStatus.B; }
		if (record.s >= 700000) { return ScoreStatus.C; }
		if (record.s >= 0) { return ScoreStatus.False; }
		return ScoreStatus.Bugged;

	}
	static Settings PageSettings = new();
	readonly static Dictionary<ScoreStatus, string> IconUrl = new()
	{
		{ ScoreStatus.Bugged, "/Assets/RksReader/Icons/QuestionMark.png" },
		{ ScoreStatus.NotFc, "/Assets/RksReader/Icons/QuestionMark.png" },
		{ ScoreStatus.Fc, "/Assets/RksReader/Icons/Fc.png" },
		{ ScoreStatus.Phi, "/Assets/RksReader/Icons/Phi.png" },
		{ ScoreStatus.Vu, "/Assets/RksReader/Icons/Vu.png" },
		{ ScoreStatus.S, "/Assets/RksReader/Icons/S.png" },
		{ ScoreStatus.A, "/Assets/RksReader/Icons/A.png" },
		{ ScoreStatus.B, "/Assets/RksReader/Icons/B.png" },
		{ ScoreStatus.C, "/Assets/RksReader/Icons/C.png" },
		{ ScoreStatus.False, "/Assets/RksReader/Icons/F.png" }
	};
}
@code {
	private const Int64 MaxFileSize = 1024 * 1024 * 16;
	private bool IsLoading = false;
	public bool Loaded { get; private set; } = false;
	private string CurrentAtt = "";
	public string SaveFileContent { get; private set; } = "";
	public Dictionary<string, string> RawParsedXml { get; private set; } = new();
	public Dictionary<string, string> DecryptedXml { get; private set; } = new();
	public List<InternalScoreFormat> AllScores { get; private set; } = new();
	public Dictionary<string, float[]> Diffcultys { get; private set; } = new();
	public Dictionary<string, string> Names { get; private set; } = new();

	private async ValueTask<string> DecryptNew(string value)
	{
		ValueTask<string> result = JS.InvokeAsync<string>("Decrypt", value);

		return await JS.InvokeAsync<string>("Decrypt", value);
	}
	private static byte DiffcultStringToIndex(string diff)
	{
		switch (diff.ToUpper())
		{
			case "EZ": return 0;
			case "HD": return 1;
			case "IN": return 2;
			case "AT": return 3;
			default: goto case "EZ";
		}
	}

	public string Status { get; private set; } = "Idle;";

	private async Task OnLoadSave(InputFileChangeEventArgs e)
	{
		if (IsLoading) { return; }
		IsLoading = true;
		try
		{
			Status = "Reading File...";
			using (var reader = new StreamReader(e.File.OpenReadStream(MaxFileSize), System.Text.Encoding.UTF8))
			{
				SaveFileContent = await reader.ReadToEndAsync();
			}
			XmlReader xmlReader = XmlReader.Create(new StringReader(SaveFileContent)); // cant use e.File.OpenReadStream
			Status = "Parsing Save...";
			while (xmlReader.Read())
			{
				switch (xmlReader.NodeType)
				{
					case XmlNodeType.Element:
						// if (xmlReader.Name != "string") { break; }
						if (xmlReader.AttributeCount < 1) { break; }
						CurrentAtt = xmlReader.GetAttribute(0);
						//try { Console.Write(await DecryptNew(System.Net.WebUtility.UrlDecode(xmlReader.GetAttribute(0)))); } catch { }
						break;
					case XmlNodeType.Text:
						//Console.Write(xmlReader.Value);
						//try { Console.WriteLine(await DecryptNew(System.Net.WebUtility.UrlDecode(xmlReader.Value))); } catch { }
						RawParsedXml.Add(CurrentAtt, xmlReader.Value);
						break;
					case XmlNodeType.EndElement:
						//Console.WriteLine("</{0}>", xmlReader.Name);
						break;
					default:
						break; // ignore
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
		// processing file start
		Status = "Decrypting Save...";
		foreach (var pair in RawParsedXml)
		{
			if (System.Net.WebUtility.UrlDecode(pair.Key).Length % 4 != 0) { continue; }
			try
			{
				DecryptedXml.Add(await DecryptNew(System.Net.WebUtility.UrlDecode(pair.Key)), await DecryptNew(System.Net.WebUtility.UrlDecode(pair.Value)));
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine("decrypting: {0} \n and {1}", pair.Key, pair.Value);
			}
		}
		// load csv
		Status = "Loading Diffculty csv...";
		string[] csvFile = (await Http.GetStringAsync(PageSettings.DiffcultyFileLocation)).Replace("\r", "").Split("\n");
		foreach (string line in csvFile)
		{
			try
			{
				float[] diffcultys = new float[4];
				string[] splitted = line.Split(",");
				for (byte i = 0; i < splitted.Length; i++)
				{
					if (i > 4 || i == 0) { continue; }
					if (!float.TryParse(splitted[i], out diffcultys[i - 1])) { Console.WriteLine($"Error processing {splitted[i]}"); }
				}
				Diffcultys.Add(splitted[0], diffcultys);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
			}
		}
		Status = "Loading Name csv...";
		string[] csvFile2 = (await Http.GetStringAsync(PageSettings.NamesFileLocation)).Replace("\r", "").Split("\n");
		foreach (string line in csvFile2)
		{
			try
			{
				string[] splitted = line.Split(@"\");
				Names.Add(splitted[0], splitted[1]);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
			}
		}
		// done load csv
		Status = "Filtering Save...";
		foreach (var pair in DecryptedXml)
		{
			//Console.WriteLine("{0}, {1}", pair.Key, pair.Value);
			if (pair.Key.Split('.').Length < 4)
			{
				continue;
			}
			try
			{
				string[] splitted = pair.Key.Split(".");
				string id = $"{splitted[0]}.{splitted[1]}";
				AllScores.Add(
					JsonConvert.DeserializeObject<ScoreFormat>(DecryptedXml[pair.Key])
						.ToInternalFormat(
							Diffcultys[id][DiffcultStringToIndex(splitted[^1])],
							id,
							splitted[^1]
						)
				);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine($"Processing {pair.Key}, {pair.Value}");
			}
		}
		foreach (var score in AllScores)
		{
			//Console.WriteLine($"{score.Key}, {score.ToString()}");
		}
		IsLoading = false;
		Loaded = true;
		RenderAll();
		Status = "Idle;";
	}
}
<div id="Title">
	<h1 id="AppTitle">Rks Reader Enchanced</h1>
	<p id="AppDescription">
		A tool let you read Phigros save file with cool settings, <br />
		all csvs are generated by <a href="https://github.com/7aGiven/Phigros_Resource">this</a> github repo, <br />
		and those "Formats" are <a href="https://learn.microsoft.com/en-us/dotnet/api/system.string.format?view=net-8.0">C# formatter</a>, <br />
		also this app uses webassembly so it has terrible load time :sob:
	</p>
</div>
<div id="Misc">
	<div id="DivInputScoreFormat" class="InputBox">
		<input id="InputScoreFormat" type="text" @bind="PageSettings.ScoreFormat" />
		<label>Score Format</label>
	</div>
	<div id="DivInputAccFormat" class="InputBox">
		<input id="InputAccFormat" type="text" @bind="PageSettings.AccFormat" />
		<label>Acc Format, add more zeros after 0.00 to get more precision</label>
	</div>
	<div id="DivInputRksFormat" class="InputBox">
		<input id="InputRksFormat" type="text" @bind="PageSettings.RksFormat" />
		<label>Rks Format, add more zeros after 0.00 to get more precision</label>
	</div>
	<div id="DivInputDiffcultyFileLocation" class="InputBox">
		<input id="InputDiffcultyFileLocation" type="text" @bind="PageSettings.DiffcultyFileLocation" />
		<label>Custom diffculty csv (Do not change it if you don't know what you are doing)</label>
	</div>
	<div id="DivInputNamesFileLocation" class="InputBox">
		<input id="InputNamesFileLocation" type="text" @bind="PageSettings.NamesFileLocation" />
		<label>Custom info csv (Do not change it if you don't know what you are doing)</label>
	</div>
	<div id="DivInputUploadSaveFile" class="InputBox" style="margin: 10px 10px 10px -10px !important;">
		<label for="InputUploadSaveFile" id="CustomUpload">Upload</label>
		<InputFile id="InputUploadSaveFile" OnChange="OnLoadSave" />
		<label>Upload save file (playerPrefs.xml)</label>
	</div>
	<!--<button id="Button.Render" @onclick="RenderAll" disabled=@(!Loaded)>Render!</button> -->
	<div id="DivButtonReset" class="ButtonBox">
		<button id="ButtonReset" @onclick="Reset" disabled=@(!Loaded)>Reset</button>
		<div id="DivLabelStatus">
			<label id="LabelStatus">Status: @Status</label>
		</div>
	</div>
</div>
@code {
	//public List<InternalScoreFormat> Scores { get; private set; } = new();
	public Dictionary<string, (int ap, int fc, int vu, int s, int a, int b, int c, int f, int cleared)> Infos = new();
	public double AverageRks
	{
		get
		{
			double _rks = 0;
			for (int i = 0; i < Math.Min(20, AllScores.Count); i++)
			{
				_rks += AllScores[i].GetRksCalculated() * 0.05;
			}
			return _rks;
		}
	}
	private void Reset()
	{
		CurrentAtt = "";
		RawParsedXml.Clear();
		DecryptedXml.Clear();
		//AllScores.Clear();
		Diffcultys.Clear();
		Names.Clear();
		AllScores.Clear();
		Loaded = false;
	}
	private void RenderAll()
	{
		Infos = new Dictionary<string, (int ap, int fc, int vu, int s, int a, int b, int c, int f, int cleared)>()
		{
			{ "EZ", new() },
			{ "HD", new() },
			{ "IN", new() },
			{ "AT", new() }
		};
		(int index, InternalScoreFormat score) highest = new();
		Status = "Sorting Save...";
		int i = 0;
		AllScores.Sort((x, y) => y.GetRksCalculated().CompareTo(x.GetRksCalculated()));
		foreach (var score in AllScores)
		{
			if (score.GetRksCalculated() > highest.score.GetRksCalculated() && score.Acc == 100)
			{
				highest.index = i;
				highest.score = score;
			}
			i++;
			try
			{
				var _info = Infos[score.DiffcultyName.ToUpper()];
				switch (score.Status)
				{
					case ScoreStatus.Phi:
						_info.ap++;
						goto case ScoreStatus.Fc;
					case ScoreStatus.Fc:
						_info.fc++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.Vu:
						_info.vu++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.S:
						_info.s++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.A:
						_info.a++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.B:
						_info.b++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.C:
						_info.c++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.False:
						_info.f++;
						goto case ScoreStatus.NotFc;
					case ScoreStatus.NotFc:
						_info.cleared++;
						break;
				}
				Infos[score.DiffcultyName.ToUpper()] = _info;
			}
			catch { }
		}
		//Scores.Sort((x, y) => x.GetRksCalculated().CompareTo(y.GetRksCalculated()));
		Status = "Rendering...";
		AllScores.Insert(0, highest.score);
		AllScores.Sort((x, y) => y.GetRksCalculated().CompareTo(x.GetRksCalculated()));
		AllScores.MoveItemAtIndexToFront(highest.index);
	}
}
<div id="Scores" style="display: @(Loaded ? "unset" : "none")">
	<table id="InfoTable">
		<tr>
			<th class="TableTitleTexts TableFirst">Diffculty/Info</th>
			<th class="TableTitleTexts TableSecond">AP Count</th>
			<th class="TableTitleTexts TableThird">FC Count</th>
			<th class="TableTitleTexts TableForth">V Count</th>
			<th class="TableTitleTexts TableFifth">S Count</th>
			<th class="TableTitleTexts TableSixth">A Count</th>
			<th class="TableTitleTexts TableSeventh">B Count</th>
			<th class="TableTitleTexts TableEighth">C Count</th>
			<th class="TableTitleTexts TableNinth">False Count</th>
			<th class="TableTitleTexts TableTenth">Clear Count</th>
		</tr>
		@foreach (var pair in Infos)
		{
			<tr>
				<td class="TableData TableFirst">@pair.Key</td>
				<td class="TableData TableSecond">@pair.Value.ap</td>
				<td class="TableData TableThird">@pair.Value.fc</td>
				<td class="TableData TableForth">@pair.Value.vu</td>
				<td class="TableData TableFifth">@pair.Value.s</td>
				<td class="TableData TableSixth">@pair.Value.a</td>
				<td class="TableData TableSeventh">@pair.Value.b</td>
				<td class="TableData TableEighth">@pair.Value.c</td>
				<td class="TableData TableNinth">@pair.Value.f</td>
				<td class="TableData TableTenth">@pair.Value.cleared</td>
			</tr>
		}
		@{
			<tr>
				<td colspan="10" class="TableData" id="AverageRks">B19 + 1Phi Average: @string.Format(PageSettings.RksFormat, AverageRks)</td>
			</tr>
		}
	</table>
	<table id="Scores.Table">
		<tr id="TableTitle">
			<th class="TableTitleTexts TableFirst">Number</th>
			<th class="TableTitleTexts TableSecond">Song Name</th>
			<th class="TableTitleTexts TableThird">Chart Constant</th>
			<th class="TableTitleTexts TableForth">Score</th>
			<th class="TableTitleTexts TableFifth">Acc</th>
			<th class="TableTitleTexts TableSixth">Rks Given</th>
			<th class="TableTitleTexts TableSeventh">Stat</th>
		</tr>
		@{
			int index = 0;
		}
		@foreach (var score in AllScores)
		{
			<tr>
				<td class="TableData TableFirst">@("#" + ((index == 0) ? "φ" : index))</td>
				<td class="TableData TableSecond">@(Names.ContainsKey(score.Name) ? Names[score.Name] : score.Name)</td>
				<td class="TableData TableThird">@string.Format(PageSettings.ChartConstantFormat, @score.DiffcultyName, @score.ChartConstant)</td>
				<td class="TableData TableForth">@string.Format(PageSettings.ScoreFormat, @score.Score)</td>
				<td class="TableData TableFifth">@string.Format(PageSettings.AccFormat, @score.Acc)</td>
				<td class="TableData TableSixth">@string.Format(PageSettings.RksFormat, @score.GetRksCalculated())</td>
				<td class="TableData TableSeventh"><img src="@IconUrl[score.Status]" width="64" height="64" /></td>
			</tr>
			index++;
		}
	</table>
</div>